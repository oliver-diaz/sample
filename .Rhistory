while(x >1){
if( isPrime1(d)){
if(x %% d == 0){
x <- x/d
pfactors <- c(pfactors,d)
} else{
d <- d+1
}
} else{
d <- d+1
}
}
return(pfactors)
}
primeFactors(10)
primeFactors(2)
isPrime1(2)
primeFactors <- function(x){
pfactors <- c()
d <- 2
while(x >1){
if( isPrime1(d)){
if(x %% d == 0){
pfactors <- c(pfactors,d)
x <- x/d
} else{
d <- d+1
} else{
primeFactors <- function(x){
pfactors <- c()
d <- 2
while(x >1){
if( isPrime1(d)){
if(x %% d == 0){
pfactors <- c(pfactors,d)
x <- x/d
} else{
d <- d+1
}
} else{
d <- d+1
}
}
return(pfactors)
}
primeFactors(24)
primeFactors(25)
primeFactors(253457)
primeFactors2 <- function(x){
pfactors <- c()
d <- 2
while(x >1){
if( d <= sqrt(x)+1){
if( isPrime1(d)){
if(x %% d == 0){
pfactors <- c(pfactors,d)
x <- x/d
} else{
d <- d+1
}
} else{
d <- d+1
}
} else{
pfactors <- c(pfactors,x)
}
}
return(pfactors)
}
primeFactors(253457)
primeFactors2(253457)
2 <= sqrt(4)+1
3 <= sqrt(4)+1
primeFactors2 <- function(x){
pfactors <- c()
d <- 2
while(x >1){
if(d <= sqrt(x)+1 &  isPrime1(d)){
if(x %% d == 0){
pfactors <- c(pfactors,d)
x <- x/d
} else{
d <- d+1
}
} else{
pfactors <- c(pfactors,x)
}
}
return(pfactors)
}
primeFactors(253457)
primeFactors2(253457)
primeFactors2(2)
primeFactors2(4)
primeFactors2(5)
primeFactors2 <- function(x){
pfactors <- c()
d <- 2
while(x >1){
if(isPrime1(d)){
if(x %% d == 0){
pfactors <- c(pfactors,d)
x <- x/d
} else{
d <- d+1
}
} else if(d > sqrt(x)+1){
pfactors <- c(pfactors,x)
} else{
d <- d+1
}
}
return(pfactors)
}
primeFactors2(5)
primeFactors <- function(x){
pfactors <- c()
d <- 2
while(x >1){
if( isPrime1(d)){
if(x %% d == 0){
pfactors <- c(pfactors,d)
x <- x/d
} else{
d <- d+1
}
} else{
d <- d+1
}
}
return(pfactors)
}
primeFactors(5)
primeFactors(25)
primeFactors(2534)
primeFactors(181)
primeFactors(181456)
primeFactors(181457)
primeFactors2 <- function(x){
pfactors <- c()
d <- 2
while(x >1){
if( d <= sqrt(x) +1){
if(isPrime1(d)){
if(x %% d == 0){
pfactors <- c(pfactors,d)
x <- x/d
} else{
d <- d+1
}
} else{
d <- d+1
}
} else{
return(c(pfactors,x))
}
}
return(pfactors)
}
primeFactors(181457)
primeFactors2(181457)
primeFactors2(18)
primeFactors1(18)
primeFactors(18)
primeFactors(1827)
primeFactors2(1827)
primeFactors2(1827001)
primeFactors(1827001)
primeFactors(1827071)
primeFactors2(1827071)
isPrime0 <- function(x){
if(x==2){
return(TRUE)
}
for(d in 2:(x-1)){
if(x %% d ==0){
return(FALSE) }
}
return(TRUE)
}
isPrime0 <- Vectorize(isPrime0, vectorize.args = "x")
isPrime1 <- function(x){
if(x==2){
return(TRUE)
}
xb <- ceiling(sqrt(x))
for(d in 2:xb){
if(x %% d ==0){
return(FALSE)
}
}
return(TRUE)
}
isPrime1 <- Vectorize(isPrime1, vectorize.args = "x")
primeFactors0 <- function(x){
pfactors <- c()
d <- 2
while(x >1){
if( isPrime1(d)){
if(x %% d == 0){
pfactors <- c(pfactors,d)
x <- x/d
} else{
d <- d+1
}
} else{
d <- d+1
}
}
return(pfactors)
}
primeFactors1 <- function(x){
pfactors <- c()
d <- 2
while(x >1){
if( d <= sqrt(x) +1){
if(isPrime1(d)){
if(x %% d == 0){
pfactors <- c(pfactors,d)
x <- x/d
} else{
d <- d+1
}
} else{
d <- d+1
}
} else{
return(c(pfactors,x))
}
}
return(pfactors)
}
### timing process
rt <- Sys.time()
rt <- Sys.time()
isPrime0(4102317001)
Sys.time() - rt
rt <- Sys.time()
isPrime1(4102317001)
Sys.time() - rt
rt <- Sys.time()
primeFactors1(4102317001)
Sys.time() - rt
rt <- Sys.time()
primeFactors1(645634556774557222)
Sys.time() - rt
645634556774557222/8
library(gmp)
install.packages("gmp")
library(gmp)
bigN <- as.bigz("645634556774557222")
bigN
rt <- Sys.time()
primeFactors1(bigN)
install.packages("Rmpfr")
library(Rmpfr)
rt <- Sys.time()
primeFactors1(bigN)
mpfr(5, precBits = 256)/4
256/4
5/4
sqrt(mpfr(bigN, precBits = 256))
mpfr(bigN, precBits = 256) %% 2
class(mpfr(bigN, precBits = 256) %% 2)
mpfr(bigN, precBits = 256) %% 2-> a
a
class(a)
a[[1]]
a[[1]]+2
isPrime1(256)
primeFactors1(256)
bigN > 1
bigN <- as.bigz("645634556774557222")
bigN
as.bigz(34)
bigN <- as.bigz(645634556774557222)
bigN
bigN <- as.bigz("645634556774557222")
bigN
mpfr(645634556774557222, precBits = 256) -> pp
pp
mpfr(as.bigz("645634556774557222"), precBits = 256) -> pp
pp
pp
pp %% 3
pp %% 2
pp %% 17
pp / 17
pp /2
(pp /2) /17
(pp /8) /17
(pp /8)
(pp /4)
(pp /2)
322817278387278611
primeFactors1(111001)
primeFactors0(111001)
rt <- Sys.time()
primeFactors0(4102317001)
rt <- Sys.time()
primeFactors1(4102317001)
Sys.time() - rt
primeFactors(4102317001)
install.packages("numbers")
numbers::primeFactors(4102317001)
gmp::factorize(4102317001)
lapply(1:sqrt(4102317001), isPrime1)
which(1:sqrt(4102317001), sapply(1:sqrt(4102317001), isPrime1))
v <- 1: sqrt(4102317001)
v
v[sapply(v, isPrime1)]
length(v[sapply(v, isPrime1)])
length(v)
rt <- Sys.time()
primeFactors1(4102317001)
Sys.time() - rt
Sys.time() - rt
class(Sys.time() - rt)
Sys.time() - rt -> pp
pp
pp[1]
as.numeric(pp)
difftime(Sys.time(), rt, units = "secs")
difftime(Sys.time(), rt, units = "secs")
proc.time
proc.time()
proc.time(1)
proc.time(0)
ptm <- proc.time()
(p <- primeFactors1(4102317001))
proc.time() - ptm
ptm <- proc.time()
(p <- primeFactors1(4102317001))
(proc.time() - ptm)[3]
isPrime1(17)
isPrime1(19)
isPrime1(100000)
isPrime1(100001)
isPrime1(1000011)
isPrime1(1000711)
isPrime1(100111)
isPrime1(7111)
isPrime1(711)
isPrime1(71)
isPrime1(10071)
isPrime1(10071)
ptm <- proc.time()
(p <- primeFactors1(4102317017))
proc.time() - ptm
ptm <- proc.time()
(p <- primeFactors1(4102317007))
proc.time() - ptm
ptm <- proc.time()
(p <- primeFactors1(41023170071))
proc.time() - ptm
ptm <- proc.time()
(p <- primeFactors1(6199663*4102317001))
proc.time() - ptm
ptm <- proc.time()
(p <- primeFactors1(6199663*101))
proc.time() - ptm
isPrime1(6199663)
gmp::factorize(6199663)
ptm <- proc.time()
(p <- primeFactors1(4102317001))
#proc.time() - ptm
Sys.time() - rt
ptm <- proc.time()
(p <- primeFactors1(4102317001))
#proc.time() - ptm
Sys.time() - ptm
#ptm <- proc.time()
ptm <- Sys.time()
(p <- primeFactors1(4102317001))
#proc.time() - ptm
Sys.time() - ptm
primeFactors1(1)
for( d in 2:1){ print(d)}
1 %% 2
primeFactors0(1)
2:0
isPrime0 <- function(x){
if(x ==1){
return(FALSE)
} else if ( x==2){
return(TRUE)
} else {
for(d in 2:(x-1)){
if(x %% d ==0){
return(FALSE)
}
}
}
return(TRUE)
}
isPrime0(1)
isPrime0(2)
isPrime0(3)
isPrime0(4)
isPrime0(5)
isPrime0(19)
isPrime0(1909091)
isPrime1(1909091)
isPrime0 <- Vectorize(isPrime0, vectorize.args = "x")
isPrime1 <- function(x){
if(x==1){
return(FALSE)
}
if(x==2){
return(TRUE)
}
xb <- ceiling(sqrt(x))
for(d in 2:xb){
if(x %% d ==0){
return(FALSE)
}
}
return(TRUE)
}
isPrime1 <- Vectorize(isPrime1, vectorize.args = "x")
isPrime1(1)
isPrime1(2)
isPrime1(3)
isPrime1(4)
isPrime1(6)
isPrime1(13143007)
isPrime1(13143017)
isPrime1(13143117)
isPrime1(1313117)
isPrime1(113117)
gmp::factorize(113117)
ptm <- Sys.time()
(p <- primeFactors1(4102317001))
#proc.time() - ptm
Sys.time() - ptm
ptm <- Sys.time()
(p <- primeFactors1(4102317002))
#proc.time() - ptm
Sys.time() - ptm
ansi_collapse(c(1,2), sep = 'x')
ansi_collapse(c(1,2), last = 'x')
ansi_collapse(c(1,2), last = ',x')
paste(c(1,2), sep = 'x')
paste(c(1,2), sep = "x")
paste(c(1,2), collapse  = "x")
paste(c(1,2,3), collapse  = "x")
p
p[1]
p[3]
p[2]
paste(p, collapse  = "x")
paste(p, collapse  = " x ")
paste(4102317001, "=", paste(p, collapse  = "x"))
paste(4102317001, "=", paste(p, collapse  = " x "))
prod(p)
ptm <- Sys.time()
(p <- primeFactors1(4102317001))
#proc.time() - ptm
Sys.time() - ptm
p
sqrt(50)
myfunction <- function(x){
.5-sqrt(1-4*x*(1-x))
}
p <- seq(.5,1, by=.01)
plot(p, myfunction(p), type = 'l')
p <- seq(0,1, by=.01)
plot(p, myfunction(p), type = 'l')
p <- seq(from=0,to=1, by=.01)
myfunction <- function(x){
.5*(1-sqrt(1-4*x*(1-x)))
}
p <- seq(from=0,to=1, by=.01)
plot(p, myfunction(p), type = 'l')
lines(p,1/p)
plot(p,min(1,p), type = 'l')
plot(p,pmin(1,p), type = 'l')
plot(p,pmin(1,1/p), type = 'l')
p
p <- seq(from=.5,to=1, by=.01)
plot(p, myfunction(p), type = 'l')
lines(p,1/p)
plot(p,1/p, type = 'l')
lines(p, myfunction(p), col='blue')
plot(p,1/p, type = 'l', xlim = c(0,3))
plot(p,1/p, type = 'l', ylim = c(0,3))
lines(p, myfunction(p), col='blue')
p <- seq(from=.01,to=1, by=.01)
plot(p,1/p, type = 'l', ylim = c(0,3))
lines(p, myfunction(p), col='blue')
myfunction <- function(x){
.5*(1-sqrt(1-4*x*(1-x)))/x
}
p <- seq(from=.01,to=1, by=.01)
plot(p,1/p, type = 'l', ylim = c(0,3))
lines(p, myfunction(p), col='blue')
p <- seq(from=.01,to=1, by=.01)
plot(p, myfunction(p), col='blue')
plot(p, (1-abs(2p-1))/(2*p), col='blue')
plot(p, (1-abs(2*p-1))/(2*p), col='blue')
myfunction <- function(x){
.5*(1-sqrt(1-4*x*(1-x)))/(x*(1-x))
}
p <- seq(from=.01,to=1, by=.01)
plot(p,1/p, type = 'l', ylim = c(0,3))
lines(p, myfunction(p), col='blue')
plot(p, (1-abs(2*p-1))/(2*p*(1-p)), col='blue')
myfunction <- function(x){
.5*(1-sqrt(1-4*x*(1-x)))/(x*(1-x))
}
plot(p,1/p, type = 'l', ylim = c(0,3))
lines(p, (1-abs(2*p-1))/(2*p*(1-p)), col='blue')
